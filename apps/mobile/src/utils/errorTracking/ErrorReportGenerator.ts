/**
 * Error Report Generator Module
 * Handles generation of comprehensive error analytics reports
 */

import { Platform } from 'react-native';
import {
  ErrorPattern,
  ErrorTrend,
  ErrorSeverity,
  ErrorCategory
} from './ErrorTypes';

export class ErrorReportGenerator {
  /**
   * Generate comprehensive analytics report
   */
  generateAnalyticsReport(
    trends: ErrorTrend,
    topPatterns: ErrorPattern[],
    criticalPatterns: ErrorPattern[]
  ): string {
    let report = `# 📊 Error Analytics Report\n\n`;
    report += `**Generated:** ${new Date().toLocaleString()}\n`;
    report += `**Platform:** ${Platform.OS}\n`;
    report += `**Analysis Period:** Last 24 hours\n\n`;

    // Executive Summary
    report += `## 📈 Executive Summary\n\n`;
    report += `- **Total Errors:** ${trends.summary.totalErrors}\n`;
    report += `- **Affected Users:** ${trends.summary.uniqueUsers}\n`;
    report += `- **Error Rate:** ${trends.summary.errorRate.toFixed(2)} errors/user\n`;
    report += `- **Critical Errors:** ${trends.summary.criticalErrors}\n`;
    report += `- **New Error Types:** ${trends.summary.newErrors}\n`;
    report += `- **Resolved Issues:** ${trends.summary.resolved}\n\n`;

    // Critical Issues
    if (criticalPatterns.length > 0) {
      report += `## 🚨 Critical Issues Requiring Immediate Attention\n\n`;
      criticalPatterns.slice(0, 5).forEach((pattern, index) => {
        report += `### ${index + 1}. ${pattern.signature}\n`;
        report += `- **Occurrences:** ${pattern.metrics.count}\n`;
        report += `- **Users Affected:** ${pattern.metrics.uniqueUsers.size}\n`;
        report += `- **Impact Score:** ${pattern.metrics.impactScore}/100\n`;
        report += `- **Trend:** ${pattern.metrics.trend}\n`;
        if (pattern.recommendations.length > 0) {
          report += `- **Top Recommendation:** ${pattern.recommendations[0].title}\n`;
        }
        report += '\n';
      });
    }

    // Top Error Patterns
    report += `## 🔍 Top Error Patterns by Impact\n\n`;
    topPatterns.slice(0, 10).forEach((pattern, index) => {
      const emoji = this.getSeverityEmoji(pattern.severity);
      report += `${index + 1}. ${emoji} **${pattern.signature}**\n`;
      report += `   - Count: ${pattern.metrics.count} | Users: ${pattern.metrics.uniqueUsers.size} | Impact: ${pattern.metrics.impactScore}/100\n`;
      report += `   - Category: ${pattern.category} | Status: ${pattern.metrics.resolution}\n`;
    });
    report += '\n';

    // Insights
    const allInsights = topPatterns.flatMap(p => p.insights).slice(0, 5);
    if (allInsights.length > 0) {
      report += `## 💡 Key Insights\n\n`;
      allInsights.forEach((insight, index) => {
        report += `${index + 1}. **${insight.title}** (${Math.round(insight.confidence * 100)}% confidence)\n`;
        report += `   ${insight.description}\n\n`;
      });
    }

    // Recommendations
    const allRecommendations = topPatterns
      .flatMap(p => p.recommendations)
      .filter(r => r.priority === 'critical' || r.priority === 'high')
      .slice(0, 5);

    if (allRecommendations.length > 0) {
      report += `## 🎯 Priority Recommendations\n\n`;
      allRecommendations.forEach((rec, index) => {
        const priorityEmoji = rec.priority === 'critical' ? '🚨' : '⚠️';
        report += `${index + 1}. ${priorityEmoji} **${rec.title}** (${rec.priority})\n`;
        report += `   ${rec.description}\n`;
        report += `   - Effort: ${rec.estimatedEffort} | Impact: ${rec.potentialImpact}\n\n`;
      });
    }

    report += `---\n*Generated by Mintenance Enhanced Error Analytics*\n`;

    return report;
  }

  /**
   * Get emoji for error severity
   */
  private getSeverityEmoji(severity: ErrorSeverity): string {
    switch (severity) {
      case ErrorSeverity.FATAL: return '🚨';
      case ErrorSeverity.ERROR: return '🔴';
      case ErrorSeverity.WARNING: return '🟡';
      case ErrorSeverity.INFO: return '🔵';
      case ErrorSeverity.DEBUG: return '⚪';
      default: return '❓';
    }
  }
}
