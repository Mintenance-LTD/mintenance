name: Security Scan

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level moderate
      continue-on-error: true

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: Run ESLint security rules
      run: |
        cd apps/web
        npx eslint . --ext .ts,.tsx --format json --output-file eslint-security-report.json || true
      continue-on-error: true

    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
      continue-on-error: true

    - name: Run dependency check
      run: |
        cd apps/web
        npx depcheck --ignores="@types/*,eslint-*,prettier,*test*,*spec*" || true
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          apps/web/eslint-security-report.json
          apps/web/snyk.sarif
        retention-days: 30

    - name: Comment PR with security findings
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          let comment = '## 🔒 Security Scan Results\n\n';
          
          // Check for ESLint security report
          const eslintReportPath = 'apps/web/eslint-security-report.json';
          if (fs.existsSync(eslintReportPath)) {
            const eslintReport = JSON.parse(fs.readFileSync(eslintReportPath, 'utf8'));
            const securityIssues = eslintReport.filter(issue => 
              issue.messages.some(msg => 
                msg.ruleId && (
                  msg.ruleId.includes('security') || 
                  msg.ruleId.includes('xss') || 
                  msg.ruleId.includes('injection')
                )
              )
            );
            
            if (securityIssues.length > 0) {
              comment += `⚠️ **${securityIssues.length} security-related ESLint issues found**\n\n`;
            } else {
              comment += '✅ **No security-related ESLint issues found**\n\n';
            }
          }
          
          // Add general security recommendations
          comment += `
          ### Security Checklist
          - [ ] Input validation implemented
          - [ ] XSS protection enabled
          - [ ] CSRF protection configured
          - [ ] SQL injection prevention
          - [ ] Authentication security reviewed
          - [ ] Authorization checks implemented
          - [ ] Rate limiting configured
          - [ ] Security headers set
          - [ ] Dependencies updated
          - [ ] Secrets not committed
          
          ### Next Steps
          1. Review any security findings above
          2. Address high/critical severity issues
          3. Update dependencies if needed
          4. Test security controls
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  database-security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Supabase CLI
      run: |
        npm install -g supabase
        supabase --version

    - name: Run database security checks
      run: |
        # Check for sensitive data exposure
        echo "Checking for sensitive data in migrations..."
        find supabase/migrations -name "*.sql" -exec grep -l "password\|secret\|key\|token" {} \; || true
        
        # Check RLS policies
        echo "Checking RLS policies..."
        supabase db diff --schema public > db-diff.txt || true
        
        # Check for admin functions
        echo "Checking admin functions..."
        grep -r "SECURITY DEFINER" supabase/migrations/ || true

    - name: Upload database security report
      uses: actions/upload-artifact@v4
      with:
        name: database-security-report
        path: |
          db-diff.txt
        retention-days: 30

  # notify-security-team:
  #   runs-on: ubuntu-latest
  #   if: failure() && github.event_name == 'schedule'
  #   needs: [security-scan, database-security-scan]
  #
  #   steps:
  #   - name: Notify security team
  #     uses: 8398a7/action-slack@v3
  #     with:
  #       status: failure
  #       channel: '#security-alerts'
  #       webhook_url: ${{ secrets.SLACK_WEBHOOK }}
  #       fields: repo,message,commit,author,action,eventName,ref,workflow
  #       text: |
  #         🚨 Security scan failed for Mintenance
  #         Repository: ${{ github.repository }}
  #         Branch: ${{ github.ref }}
  #         Commit: ${{ github.sha }}
  #         Please review the security reports and address any critical issues.
  #
  # NOTE: Uncomment when SLACK_WEBHOOK secret is configured
